@media (min-width: 0em) {
  selector-breakpoint {
    test: "@include breakpoint(small)";
    min: 0em; } }
@media (min-width: 40em) {
  selector-breakpoint {
    test: "@include breakpoint(medium)";
    min: 40em; } }
@media (min-width: 64em) {
  selector-breakpoint {
    test: "@include breakpoint(large)";
    min: 64em; } }
@media (min-width: 75em) {
  selector-breakpoint {
    test: "@include breakpoint(xlarge)";
    min: 75em; } }
@media (min-width: 90em) {
  selector-breakpoint {
    test: "@include breakpoint(xxlarge)";
    min: 90em; } }
@media (min-width: 40em) {
  selector-breakpoint {
    test: "@include breakpoint(medium up)";
    min: 40em; } }
@media (max-width: 74.9375em) {
  selector-breakpoint {
    test: "@include breakpoint(large down)";
    max: 74.9375em; } }
@media (min-width: 90em) {
  selector-breakpoint {
    test: "@include breakpoint(xxlarge only)";
    min: 90em; } }
@media (min-width: 0em) and (max-width: 39.9375em) {
  selector-breakpoint {
    test: "@include breakpoint(small only)";
    min: 0em;
    max: 39.9375em; } }
@media (min-width: 0em) and (max-width: 74.9375em) {
  selector-breakpoint {
    test: "@include breakpoint(small large)";
    min: 0em;
    max: 74.9375em; } }
@media (min-width: 40em) and (max-width: 74.9375em) {
  selector-breakpoint {
    test: "@include breakpoint(medium large)";
    min: 40em;
    max: 74.9375em; } }

@media (orientation: portrait) {
  selector-media {
    test: "@include media(portrait)";
    orientation: portrait;
    device: all; } }
@media (orientation: landscape) {
  selector-media {
    test: "@include media(landscape)";
    orientation: landscape;
    device: all; } }
@media only print {
  selector-media {
    test: "@include media(print)";
    orientation: all;
    device: print; } }
@media only screen {
  selector-media {
    test: "@include media(screen)";
    orientation: all;
    device: screen; } }
@media only speech {
  selector-media {
    test: "@include media(speech)";
    orientation: all;
    device: speech; } }
@media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {
  selector-media {
    test: "@include media(2x)";
    orientation: all;
    device: all;
    resolution: 2x; } }
@media (-webkit-min-device-pixel-ratio: 1.30208), (min-resolution: 125dpi) {
  selector-media {
    test: "@include media(125dpi)";
    orientation: all;
    device: all;
    resolution: 125dpi; } }
@media (-webkit-min-device-pixel-ratio: 2.5), (min-resolution: 240dpi) {
  selector-media {
    test: "@include media(2.5dppx)";
    orientation: all;
    device: all;
    resolution: 2.5dppx; } }
@media only screen and (-webkit-min-device-pixel-ratio: 0.75), only screen and (min-resolution: 72dpi) {
  selector-media {
    test: "@include media(screen 72dpi)";
    orientation: all;
    device: screen;
    resolution: 72dpi; } }

@media only screen and (orientation: portrait) and (-webkit-min-device-pixel-ratio: 3), only screen and (orientation: portrait) and (min-resolution: 288dpi) {
  selector-media {
    test: "@include media(screen portrait 3x)";
    orientation: portrait;
    device: screen;
    resolution: 3x; } }

@media only screen and (min-width: 64em) and (max-width: 74.9375em) and (orientation: landscape) and (-webkit-min-device-pixel-ratio: 2), only screen and (min-width: 64em) and (max-width: 74.9375em) and (orientation: landscape) and (min-resolution: 192dpi) {
  selector {
    test: "@include breakpoint(large only) -> @include media(screen landscape 2x)";
    min: 64em;
    max: 74.9375em;
    orientation: landscape;
    device: screen;
    resolution: 2x; } }

@media only print and (max-width: 63.9375em) {
  selector {
    test: "@include media(print) -> @include breakpoint(medium down)";
    max: 63.9375em;
    orientation: all;
    device: print; } }

@media (min-width: 64em) {
  selector {
    test: "@include breakpoint(large)";
    min: 64em;
    orientation: all;
    device: all; } }
@media only screen {
  selector {
    test: "@include media(screen)";
    orientation: all;
    device: screen; } }

/*# sourceMappingURL=test-context.css.map */
